Ejercicio 1 =

1) Cree un repositorio git a partir del contenido del fichero .zip
   que se le ofrece.

2) La clase App1 dispone del método divide() que contiene un error
   de programación pues devuelve la multiplicación en lugar de la
   división. Corrija el problema y aplique el cambio al repositorio
   en la rama 'master'.

3) En una rama denominada 'next', mueva el método multiplica a la clase
   App1 y elimine la clase App2.

4) Desde la rama 'master' renombre la clase App1 de manera que su nuevo
   nombre sea MisMatematicas.

5) Una la rama 'next' a la rama 'master'.

6) Entrega: Envíe un fichero zip con la carpeta al email: pneira@us.es.
Emplee como asunto [EGC][1EJ] Apellidos, Nombre.


= Ejercicio 2 =

1) Crea un pom.xml para que Maven compile adecuadamente el proyecto teniendo en cuenta que:
   - El proyecto debe pertenecer al grupo es.egc, su formato de empaquetamiento debe ser jar, el artifactId debe ser tu DNI y la versión debe ser la 0.2.0
   - El proyecto utiliza la librería Log4J para logging y JUnit 3 para ejecutar las pruebas unitarias.
   - Genere un JAR cuyo punto de entrada sea la clase MisMatematicas.
   - Copie todas las dependencias a una carpeta del proyecto.

2) Crea un fichero Dockerfile que parta de una imagen de Java (por ejemplo, openjdk:8-alpine), añada las dependencias y el JAR y ejecute éste último (el comando para ejecutar en un Dockerfile es CMD).

3) Lanza la imagen de Docker llamada resinas/egc1718 de forma que redirija el puerto 8080 de tu máquina al puerto 1234 del contenedor. Después entra en ``http://localhost:8080/docker`` y crea un fichero docker.txt con el comando de Docker que has utilizado y el contenido que aparece en pantalla.

4) Entrega: Envíe un fichero zip con la carpeta al email: resinas@us.es. Emplee como asunto [EGC][2EJ] Apellidos, Nombre.


= Ejercicio 3 =

1) Haga un fork del repositorio de GitHub resinas/bye-java. Es un proyecto pensado para generar un JAR que, al ejecutarse, lanzará un servidor web y desplegará en él un API REST de gestión de tareas. La ejecución del JAR se realiza de la forma habitual. Esto es, si el JAR se llamase mijar-1.0.0.jar, se ejecutaría ``java -jar mijar-1.0.0.jar``.

2) Cree un fichero de configuración de Travis CI para que:
   - Realice la construcción automática del proyecto utilizando Oracle JDK 7 y Oracle JDK 8
   - Envíe un correo electrónico siempre que haya una nueva build, no sólo en caso de error.

3) [Sólo para alumnos cuyo peso de las prácticas sea 0.3 en lugar de 0.2] Realice los pasos necesarios para desplegar el proyecto de manera automática en Heroku a través de Travis. Incluya la url del despliegue de la aplicación y del fork del repositorio de GitHub en un fichero README en el proyecto.

4) Entrega: Envía un fichero zip con la carpeta al email: amarquez6@us.es. Emplee como asunto [EGC][3EJ] Apellidos, Nombre.



git clone <url>
git status
git add <file>
git commit -a -m ÒNueva versi—nÓ
git log
git log Ðoneline
git show <commitId>
git branch
git branch <branchName>
git checkout -b <branchName>
git checkout <branchName>
git merge <branchName>
git remote
git remote add <remoteName> <url>
git push <remoteName> <branchName>
git pull
git checkout <fileName>
git reset Ðhard
gir reset HEAD^
git commit Ðamend
git rebase -i <commitId>

1. cd Desktop/nombre_de_la_carpeta
2. git clone y la url de tu repo
3. Una vez que se ha clocado accedes a la carpeta cd prueba1
4. git status 
5. git add Ònombre del archivoÓ
5. git commit -m Ònombre del commitÓ
6. git push
7. git status
8. git pull ( o mirar si lo has a–adido bien por el desktop)
9. git branch next (creo la rama next)
10. git branch (para que me muestre todas las ramas)
11. git checkout next (para meterme en la rama next) 
Todo lo que haga ahora se har‡ en la rama nueva si quiero irme a otra git checkout master
12. Para borrar un archivo, lo borro y hago:
	12.1 git status
	12.2 git add nombre del fichero que he borrado
	12.3 git commit -m "borro txt en la rama que seaÒ
	12.4 git push
	12.5 git pull